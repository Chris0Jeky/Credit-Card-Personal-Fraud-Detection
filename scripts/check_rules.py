import pandas as pd
import json
from pathlib import Path
from geopy.distance import geodesic
from datetime import datetime, timedelta

# --- Configuration ---
# Input files generated by simulate_entities.py
SIMULATION_DIR = Path("../data/simulation_output")
ACCOUNT_DETAILS_FILE = SIMULATION_DIR / "simulated_account_details.json"
TRANSACTIONS_FILE = SIMULATION_DIR / "simulated_account_transactions.csv"

# Rule Thresholds
LOCATION_THRESHOLD_KM = 500  # Max distance from home for a 'normal' transaction
HIGH_AMOUNT_THRESHOLD = 1000 # Example: Flag transactions over $1000
RECENT_ACCOUNT_DAYS = 30     # Definition of a 'recent' account for velocity checks
RECENT_ACCOUNT_HIGH_VELOCITY_THRESHOLD = 5 # Max transactions in 24h for recent account
# ---

def calculate_distance(lat1, lon1, lat2, lon2):
    """Calculate distance in kilometers between two lat/lon points."""
    if pd.isna(lat1) or pd.isna(lon1) or pd.isna(lat2) or pd.isna(lon2):
        return float('inf') # Indicate missing data
    try:
        return geodesic((lat1, lon1), (lat2, lon2)).km
    except ValueError:
        print(f"Warning: Invalid coordinates for distance calculation ({lat1},{lon1}) to ({lat2},{lon2})")
        return float('inf') # Indicate calculation error

def check_transaction_rules(transaction_row, account_details, recent_transactions):
    """
    Applies rules to a single transaction.
    `recent_transactions` is a list of timestamps from the last 24h for velocity checks.
    """
    flags = []
    account_lat = account_details.get('lat')
    account_lon = account_details.get('long')
    account_creation_str = account_details.get('account_creation_date')


